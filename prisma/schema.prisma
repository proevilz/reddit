generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Board {
  id         String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  title      String?
  name       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  visibility Visibility @default(PUBLIC)
  nsfw       Boolean    @default(false)
}

model Post {
  id         String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  title      String
  body       String
  published  Boolean   @default(false)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  categories Category  @default(POST)
  comments   Comment[]
}

model Comment {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
}

model User {
  id            String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  email         String    @unique
  username      String?
  name          String?
  role          Role      @default(USER)
  posts         Post[]
  profile       Profile?
  Comment       Comment[]
  Banned        Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id          String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  about       String
  headerImage String
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique @db.ObjectId
}

model Account {
  id                       String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  userId                   String  @unique @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MOD
  ADMIN
}

enum Visibility {
  PUBLIC
  RESTRICTED
  PRIVATE
}

enum Category {
  POST
  IMAGE
  LINK
}
